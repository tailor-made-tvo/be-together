//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TMS.Caching.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CacheDataEntities : DbContext
    {
        public CacheDataEntities()
            : base("name=CacheDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CacheData> CacheData { get; set; }
    
        public virtual int CacheData_Delete(string partitionName, string key)
        {
            var partitionNameParameter = partitionName != null ?
                new ObjectParameter("partitionName", partitionName) :
                new ObjectParameter("partitionName", typeof(string));
    
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CacheData_Delete", partitionNameParameter, keyParameter);
        }
    
        public virtual ObjectResult<CacheData_Insert_Result> CacheData_Insert(string partitionName, string key, string value)
        {
            var partitionNameParameter = partitionName != null ?
                new ObjectParameter("partitionName", partitionName) :
                new ObjectParameter("partitionName", typeof(string));
    
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CacheData_Insert_Result>("CacheData_Insert", partitionNameParameter, keyParameter, valueParameter);
        }
    
        public virtual ObjectResult<CacheData_Update_Result> CacheData_Update(string partitionName, string key, string value)
        {
            var partitionNameParameter = partitionName != null ?
                new ObjectParameter("partitionName", partitionName) :
                new ObjectParameter("partitionName", typeof(string));
    
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CacheData_Update_Result>("CacheData_Update", partitionNameParameter, keyParameter, valueParameter);
        }
    }
}
